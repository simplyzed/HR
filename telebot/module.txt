
Функция РабочееВремя()
	нач = НачалоДня( ТекущаяДата() );
	утро = нач + 60*60*8; //8 часов
	ночь = нач + 60*60*22; //22 часа
	если ТекущаяДата()<ночь и ТекущаяДата()>утро тогда
		возврат истина	; // рабочее время
	иначе
		возврат ложь;
	КонецЕсли;
	
конецФункции

Процедура ВыполнитьКоманду(ИмяКоманды, ОбъектыНазначения= Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	если не рабочеевремя() тогда
		возврат;
	конецесли;
	
	//ЗаписьЖурналаРегистрации("Debug", 
	//	УровеньЖурналаРегистрации.Ошибка,
	//	,
	//	"команда: " + ИмяКоманды
	//	);
	
	ИнициализироватьНастройки();
	
	Если ИмяКоманды = "ПолучитьНовыеСообщения" Тогда		
		вРасписанииУказалиСекунд = 1; //было 180
		началоВыполненияКоманд = ТекущаяДата();
		конецВыполнения = началоВыполненияКоманд + вРасписанииУказалиСекунд ; //вРасписанииУказалиСекунд сек перезапуск регламентного задания
		таймаут = 15; //по умолчанию
		
		если ТипЗнч(ПараметрыВыполнения) = тип("Число") тогда 
			//кнопкой из формы
			таймаут = ПараметрыВыполнения; 
		иначеесли ТипЗнч(ПараметрыВыполнения) = тип("Структура")	тогда
			если 	ПараметрыВыполнения.свойство("таймаут") и 
					ТипЗнч(ПараметрыВыполнения.таймаут)=тип("Число") и 
					ПараметрыВыполнения.таймаут > 0 тогда
				таймаут = ПараметрыВыполнения.таймаут ;
			конецесли;
		иначе
		конецесли;
		ПолучитьНовыеСообщенияНаСервере(таймаут);
		
	ИначеЕсли ИмяКоманды = "ПолучитьЗаказыОзон" Тогда
		Озон_ПолучитьЗаказы(истина);
	ИначеЕсли ИмяКоманды = "СоздатьДокументыПоОтгрузке" Тогда
		//СоздатьДокументыПоОтгрузке();
		ПроверитьПеревестиНаСледующийСтатус(неопределено, истина);
	ИначеЕсли ИмяКоманды = "ОтправитьЗаказыОзон" Тогда
		Озон_ОтправитьЗаказы();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ФоновоеЗаданиеИзКлиентаВМодуле(СтруктураПараметров, АдресРезультата) Экспорт
	
	
	//отладить с ключем конфигуратора /c не получится, т.к. не в фоне и зациклится -  см описание в ДлительныеОперации.ВыполнитьВФоне
//#Если ВнешнееСоединение Тогда
//	ВыполнитьБезФоновогоЗадания = ИнформационнаяБазаФайловая 
//		Или ОбщегоНазначения.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне
//		Или (ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) 
//		Или Не ВозможноВыполнитьВФоне(ИмяПроцедуры);
//#Иначе
//	ВыполнитьБезФоновогоЗадания = Не ПараметрыВыполнения.БезРасширений
//		И (ОбщегоНазначения.РежимОтладки() Или ПараметрыВыполнения.ЗапуститьНеВФоне
//			Или (ЕстьФоновыеЗаданияВФайловойИБ() И Не ПараметрыВыполнения.ЗапуститьВФоне) 
//			Или Не ВозможноВыполнитьВФоне(ИмяПроцедуры));
//#КонецЕсли
	ВыполнитьБезФоновогоЗадания = ОбщегоНазначения.РежимОтладки();
	повторНомерВыполнитьБезФоновогоЗадания = 0;
	максПовторовВыполнитьБезФоновогоЗадания = 3;
	
	
	
    автоматВключен = СтруктураПараметров.автоматВключен;
	таймаут = 60;
	секундМеждуПолучениемЗаказов = 15*60; //; см получить заказы 
	
	если ВыполнитьБезФоновогоЗадания тогда 
		таймаут = 20;
	конецесли;
	
	
	повторНомер = 1;  
	прошлыйЗапуск = текущаяДата();
	последнееВремяИзмененияНастроек = текущаяДата();
	пока автоматВключен цикл
		повторНомер = повторНомер + 1;
		если текущаяДата() <= прошлыйЗапуск+1 тогда
			если повторНомер > 2 тогда //не более 2 раз в сек
				ОбщегоНазначенияБТС.Пауза(20);
				повторНомер =1;
			конецесли;
		иначе
			прошлыйЗапуск =  текущаяДата();
			повторНомер = 1;
		конецесли;
		
		если текущаяДата() >= ВремяЗапросаОбновленийЗаказов + секундМеждуПолучениемЗаказов тогда
			если не ВыполнитьБезФоновогоЗадания тогда
				команда =  "ПолучитьЗаказыОзон";
				ВыполнитьКоманду(команда);
			иначе
				//долго обновляет. не нужно при отладке. ручками, если что
			конецесли;
		конецесли;

        команда =  "ПолучитьНовыеСообщения";
		ВыполнитьКоманду(команда,,таймаут);
		
		//когда обработка идет в фоне она не связана с объектом в клиентской форме
		//через загрузку настроек выходим из положения
		ЗагрузитьНастройкиАвтомат();
		
		если ВыполнитьБезФоновогоЗадания тогда
			повторНомерВыполнитьБезФоновогоЗадания = повторНомерВыполнитьБезФоновогоЗадания + 1;
		конецесли;
		если повторНомерВыполнитьБезФоновогоЗадания > максПовторовВыполнитьБезФоновогоЗадания тогда
			автоматВключен = ложь;
		конецесли; 
		
		если последнееВремяИзмененияНастроек < времяИзмененияНастроек тогда
			//настройки сохраняются в случае изменений. Нужно оповестить форму.
			//помещаем в ВХ данные для клиента.
			прервать; 
			//СтруктураВозврата = Новый Структура();
			//СтруктураВозврата.Вставить("времяИзмененияНастроек", времяИзмененияНастроек);
			//СтруктураВозврата.Вставить("автоматВключен", времяИзмененияНастроек);
			//ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		конецесли;
		//последнееВремяИзмененияНастроек = времяИзмененияНастроек;
		
	конеццикла;

	
	
	
	
    //формируем возвращаемую структуру на клиент
    СтруктураВозврата = Новый Структура();
//    СтруктураВозврата.Вставить("РезультатЗапроса", "");
    СтруктураВозврата.Вставить("времяИзмененияНастроек", времяИзмененияНастроек);
    СтруктураВозврата.Вставить("автоматВключен", автоматВключен);
	
    //СтруктураВозврата.РезультатЗапроса = Telegram_GetUpdates(timeout);
    //помещаем в ВХ данные для клиента
    ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
КонецПроцедуры




//////////////////
&НаСервере
Процедура ИнициализироватьНастройки() экспорт 
	если ЭтотОбъект.Бот = "" тогда
		....

		//Заполнение таблицы команд бота
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/start";
		НоваяКоманда.ВыполняемоеДействие = "ВывестиПриветствие";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "начало работы";

		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/help";
		НоваяКоманда.ВыполняемоеДействие = "ВывестиПодсказку";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "подсказка";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orders";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СписокЗаказовСборкаСегодня";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Список сегодняшних заказов на сборку";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orders_short";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СписокОтправленийДляСборкиНаСегодня";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Список сегодняшних отправлений на сборку";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/next_order";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СледующийЗаказ";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Выбрать следующий заказ на сборку";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orderno";
		НоваяКоманда.ВыполняемоеДействие = "Озон_ЗаказПоНомеру";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Выбрать заказ по номеру";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/namesearch";
		НоваяКоманда.ВыполняемоеДействие = "Озон_ТоварыПоНаименованию";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Поиск по наименованию";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/current_order";
		НоваяКоманда.ВыполняемоеДействие = "Озон_ИнфоОТекущемЗаказе";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Инфо о текущем заказе";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orders_future";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СписокЗаказовПозже";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Список заказов на сборку на завтра и позже";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orders_all";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СписокЗаказовВсех";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Список всех заказов";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/orders_all_short";
		НоваяКоманда.ВыполняемоеДействие = "Озон_СписокОтправленийВсех";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Список всех отправлений";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/qr_remove";
		НоваяКоманда.ВыполняемоеДействие = "Озон_УдалитьQRКод";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Убрать QRКод в текущем заказе";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/renew_orders";
		НоваяКоманда.ВыполняемоеДействие = "Озон_ПолучитьЗаказы";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Получить новые заказы на Озоне";
		
		НоваяКоманда = ЭтотОбъект.ТаблицаПонимаемыхКоманд.Добавить();
		НоваяКоманда.Имя = "/send_orders";
		НоваяКоманда.ВыполняемоеДействие = "Озон_ОтправитьЗаказы";
		НоваяКоманда.Параметр = "";
		НоваяКоманда.Описание = "Отправить сегодняшние собранные заказы на Озон";
		
		ЗагрузитьНастройки();
		
		Если ЭтотОбъект.ВремяЗапросаЗаказов < началоДня(ТекущаяДата())  тогда
		   ЭтотОбъект.ВремяЗапросаЗаказов = началоДня(ТекущаяДата())  ;
		конецесли;
	конецесли;
	
КонецПроцедуры 

//////////////


&НаСервере
Функция ВебЗапрос(ИмяМетода, АдресСервера, АдресРесурса, SSL = истина, Таймаут =30, СтрокаТелаЗапроса=неопределено, Заголовки = неопределено, НуженФайлОтвета = Неопределено)	
	
	//файлОтладка = Новый ЗаписьТекста("c:\tmp\debug.txt",,,истина);
	//файлОтладка.ЗаписатьСтроку(строка(ТекущаяДата()) +  " веб-запрос начало: "+АдресРесурса);
	//файлОтладка.Закрыть();
	
	если не ЗапретитьВебЗапрос (АдресСервера) тогда
		возврат "";	
	конецесли;
	текстСоообщения = "";
	
	ВремяЗапроса = ТекущаяДата();
	Попытка	
		если не SSL тогда
			HTTPСоединение = Новый HTTPСоединение(АдресСервера,,,,,Таймаут);
		иначе
			если  Таймаут=0 тогда
				Таймаут = 10;	
			конецесли;
			HTTPСоединение = Новый HTTPСоединение(АдресСервера,443,,,,Таймаут,Новый ЗащищенноеСоединениеOpenSSL());
		конецесли;
	Исключение	
		текстСообщения = ("[ВебЗапрос]"+ "Не удалось соединиться с сервером: " + АдресСервера + ", " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + текстСообщения ;
		СохранитьИнфоОВебЗапросе (ИмяМетода, АдресСервера, АдресРесурса, времяЗапроса, текстСообщения );
		Возврат "";
	КонецПопытки; 
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	Если Заголовки <> Неопределено Тогда 		
		Для Каждого элемент Из Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(элемент.Ключ, элемент.Значение);
		КонецЦикла;
	КонецЕсли;
		
	Если ИмяМетода = "POST" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	КонецЕсли;
	
	Попытка		
		Результат = HTTPСоединение.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос);
		
		//файлОтладка = Новый ЗаписьТекста("c:\tmp\debug.txt",,,истина);
		//файлОтладка.ЗаписатьСтроку(строка(ТекущаяДата()) +  " веб-запрос закончен "+АдресРесурса);
		//файлОтладка.Закрыть();
	
		текстСообщения = Результат.ПолучитьТелоКакСтроку();
		Если НуженФайлОтвета = Истина Тогда			
			НуженФайлОтвета = ПолучитьИмяВременногоФайла();
			дд = Результат.ПолучитьТелоКакДвоичныеДанные();
			дд.Записать(НуженФайлОтвета);
		КонецЕсли;
		
		Если Результат.КодСостояния <> 200 тогда
			поз = СтрНайти(АдресРесурса,"&text");
			если поз >0  тогда
				частьАдреса = сокрлп (сред (адресРесурса,поз+6));
			иначе
				частьАдреса = СтрЗаменить( АдресРесурса, "&","\&");
			конецесли;
			дляОтладки = ("[ВебЗапрос] [..." + частьАдреса + "]Ответ сервера: " + Результат.КодСостояния+символы.ПС);
			дляОтладки = дляОтладки + ("POST: " + СтрокаТелаЗапроса+символы.ПС);  //писатьлог
			дляОтладки = дляОтладки + ("Результат: " + текстСообщения);//писатьлог
			этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + дляОтладки; 
		КонецЕсли;	
		
		СохранитьИнфоОВебЗапросе (ИмяМетода, АдресСервера, АдресРесурса, времяЗапроса, текстСообщения);
		Возврат текстСообщения;
	Исключение
		текстСообщения = ("[ВебЗапрос]"+ПодробноеПредставлениеОшибки (ИнформацияОбОшибке()));   
		этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + текстСообщения;
	КонецПопытки;
	
	СохранитьИнфоОВебЗапросе (ИмяМетода, АдресСервера, АдресРесурса, времяЗапроса, текстСообщения);
	Возврат "";
КонецФункции

&НаСервере
Функция JSON_ВСтруктуру(строкаJSON) экспорт
	//RegExp = Новый COMОбъект("VBScript.RegExp");
	//RegExp.Global = Истина;		
	//RegExp.IgnoreCase = Истина;	
	//RegExp.MultiLine = Ложь; 
	//RegExp.Pattern = """(\d+""\s*:)";
	//строкаJSON = RegExp.Replace(строкаJSON, """_$1");
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(строкаJSON);
	Данные = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();	
	Возврат Данные;
КонецФункции

&НаСервере
Функция JSON_СтрокаИзСтруктуры(Данные)
	Запись = Новый ЗаписьJSON;	
	//Если чбВклТаб Тогда
		Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	//Иначе
	//	Запись.УстановитьСтроку();
	//КонецЕсли;
	ЗаписатьJSON(Запись, Данные);
	Возврат Запись.Закрыть();	
КонецФункции

&НаСервере
Функция ЗапретитьВебЗапрос (Сервер)
	вебЗапросРазрешен = истина;
	для каждого инфоОЗапросе из ЭтотОбъект.ВебЗапросы цикл
		если инфоОЗапросе.Сервер = Сервер и инфоОЗапросе.БлокироватьЗапросыДо > ТекущаяДата() тогда
			вебЗапросРазрешен = ложь; 	
		конецесли;
	конеццикла;
	Возврат вебЗапросРазрешен;
конецФункции

&НаСервере
//сохранить результат и поставить блокировки по частоте запросов
Процедура СохранитьИнфоОВебЗапросе (ИмяМетода, АдресСервера, АдресРесурса, времяЗапроса, Результат)
	максЗаписейПоСерверу = 3;
	
	колВоЗаписей = 1;  к =0;
	пока к < ЭтотОбъект.ВебЗапросы.Количество()-1 цикл
		если ЭтотОбъект.ВебЗапросы[к].Сервер = АдресСервера тогда
			если колВоЗаписей >= максЗаписейПоСерверу тогда       //-1 - тк есть новая запись
				ЭтотОбъект.ВебЗапросы.Удалить(к);
				к = к -1;
			иначе
				колВоЗаписей = колВоЗаписей + 1;
			конецесли;
		конецесли;
		к = к + 1;
	конеццикла;
	
	новСтрока = ЭтотОбъект.ВебЗапросы.Вставить(0);
	новСтрока.Сервер = АдресСервера;
	новСтрока.Адрес = АдресРесурса;
	новСтрока.ВремяЗапроса = времяЗапроса; 
	новСтрока.Параметры = ИмяМетода;
	новСтрока.РезультатЗапроса = Результат; 
	если СтрНайти (НРег( Результат ), "timeout" ) > 0 или
		 СтрНайти (НРег( Результат ), "превышен" ) > 0 или
		 СтрНайти (НРег( Результат ), "ошибка" ) > 0 или
		 (СтрНайти (НРег( Результат ), "не удалось" ) > 0 и СтрНайти (НРег( Результат ), "не удалось доставить" )=0)тогда
		новСтрока.БлокироватьЗапросыДо = ТекущаяДата() + 60 ;
	конецесли;
	//сохранять таблицу неактуально
	
КонецПроцедуры

//////////////////




////////////////// telegram getupdates

&НаСервере
функция ПолучитьНовыеСообщенияНаСервере(timeout) экспорт
		//timeout = 3;
		ЭтотОбъект.http_result = "";
		АдресСервера = ЭтотОбъект.Сервер;
		//объект.last_update_id = 1;
		offset = ? (ЭтотОбъект.last_update_id = 0, "", "&offset=" + ЧислоСтр(ЭтотОбъект.last_update_id) );
		АдресРесурса = "bot" + ЭтотОбъект.Токен + "/getUpdates?timeout=" + ЧислоСтр(timeout)+ offset;
//		АдресРесурса = "bot" + Объект.Токен + "/getUpdates";
		//long poll - когда есть таймайут. Будет работать без таймаута, если есть сообщения в ответе.
		//их можно пропустить, если есть offset.
		//таймаут http запроса нужно увеличить немного относительно таймаута telegram, т.к. есть сетевые задержки
		timeoutHTTP = ? (timeout > 0, timeout + 3, 00);
		
		количествоПопытокСоединения = 1;
		максКоличествоПопытокСоединения = 2;
		РезультатЗапроса = "";
		пока не (РезультатЗапроса <> "" или количествоПопытокСоединения > максКоличествоПопытокСоединения ) цикл
			РезультатЗапроса = ВебЗапрос("GET", АдресСервера, АдресРесурса, Истина, timeoutHTTP);
			http_result = РезультатЗапроса;
			количествоПопытокСоединения	= количествоПопытокСоединения +1 ;
		конеццикла;
		
		попытка
			если РезультатЗапроса <> "" тогда
				СтруктураJSON = JSON_ВСтруктуру(РезультатЗапроса);
				ДобавитьКомандыИзСообщенийJSON(СтруктураJSON);
				ВыполнитьНовыеКоманды();
				ВывестиСообщенияОтладки();
			конецесли;
		исключение       
			ЭтотОбъект.СообщениеОтладки = ЭтотОбъект.СообщениеОтладки +"[ПолучитьНовыеСообщенияНаСервере] " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + "[ПолучитьНовыеСообщенияНаСервере]"	;
		конецПопытки;
		
		
		возврат РезультатЗапроса;
Конецфункции

&НаСервере
функция ВывестиСообщенияОтладки()
	если сокрЛП( ЭтотОбъект.СообщениеОтладки ) <> "" тогда
			для каждого чат из ЭтотОбъект.СписокЧатовДляУведомлений цикл
				если чат.ОтправлятьСообщенияОтладки  = Истина и чат.Включен тогда
					ВывестиСообщениеТелеграм(ЭтотОбъект.СообщениеОтладки, чат.id);
				конецесли;
			КонецЦикла;
	конецесли;
	ЭтотОбъект.СообщениеОтладки = "";
Конецфункции

//////////////////



///// ------ вызов команд ------------------
&НаСервере
функция ДобавитьКомандыИзСообщенийJSON (СтруктураJSON)
	//найти последнюю, чтобы добавить только новые
	last_message_date = 0;
	//ТаблицаКомандыПользователей = РеквизитФормыВЗначение( "Объект.КомандыПользователей");
	для Каждого команда из ЭтотОбъект.КомандыПользователей цикл
		если команда.date > last_message_date тогда
			last_message_date = команда.date;	
		конецесли;
	конецЦикла;
	//очистим старое после прошлого запуска
	к = ЭтотОбъект.КомандыПользователей.Количество()-15 ;
	пока к>=0 цикл //последние 15 оставим
		команда = ЭтотОбъект.КомандыПользователей[к];
		если команда.date < last_message_date и команда.Выполнено тогда
			ЭтотОбъект.КомандыПользователей.Удалить(к);
		конецесли;
		к = к - 1 
	конецЦикла;
	
	
	
	//здесь добавляются команды из JSON
	если СтруктураJSON.свойство("ok") и СтруктураJSON.ok тогда
		для каждого result_data из СтруктураJSON.result цикл
			попытка 
				если result_data.свойство("message") тогда
					new_date = result_data.message.date;
					если new_date > last_message_date и result_data.message.свойство("text") тогда 
						//боту отдаем только текстовые команды
						если не ИгнорироватьЧат (result_data.message.chat.id) тогда
							добавитьКомандуИзСообщения ( result_data.message, result_data.update_id );
						конецесли;
					конецесли;
				иначе
					//не наше, плохое сообщение - пропустим, чтобы не зацикливаться.
					ВызватьИсключение ("Нет структуры message");
				конецесли;
			исключение
				дляОтладки = "";
				//чтобы в следующий раз не спотыкаться на этом сообщении
				если ЭтотОбъект.last_update_id <= result_data.update_id тогда
					ЭтотОбъект.last_update_id = result_data.update_id + 1  ;
					СохранитьНастройки();
				конецесли; 
				
				дляОтладки = JSON_СтрокаИзСтруктуры( СтруктураJSON );
				//Для Каждого Элемент из result_data Цикл
				//	Если ТипЗнч(Элемент.Значение) <> Тип("Структура") тогда
				//		дляОтладки = дляОтладки + Элемент.Ключ + ": " + Элемент.Значение+символы.ПС;
				//	иначеесли ТипЗнч(Элемент.Значение) = Тип("Структура")  тогда
				//		дляОтладки = дляОтладки + Элемент.Ключ + ": структура" +символы.ПС;
				//	иначе
				//		дляОтладки = дляОтладки + " иное"+символы.ПС;
				//	конецесли;
				//КонецЦикла;	
				этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + ("[ДобавитьКомандыИзСообщенийJSON] Структура ответа telegram не соответствует норме. Текущий элемент: " + дляОтладки );
				//или же это не message 
				
				
			конецпопытки;
		конеццикла;
	конецесли;
	
	//ЗначениеВРеквизитФормы( ТаблицаКомандыПользователей, "ЭтотОбъект.КомандыПользователей");

конецфункции	

&НаСервере
функция ДобавитьКомандуИзСообщения ( message, update_id )
	//если команда с таким update_id есть - не добавляем. Думаю что update_id и message_id
	для каждого команда из ЭтотОбъект.КомандыПользователей цикл
		если команда.update_id = update_id и команда.message_id = message.message_id  тогда
			ЭтотОбъект.last_update_id = update_id + 1  ;
			возврат истина;
		конецесли;
	конеццикла;
	
	newRow = ЭтотОбъект.КомандыПользователей.Добавить();
	newRow.message_id = message.message_id;
	newRow.date = message.date;
	newRow.chat_id = message.chat.id;
	newRow.команда = СокрЛП ( СтрЗаменить( message.text, "@xxxxxx_bot","") );  //убираем имя бота из команд
	newRow.update_id = update_id;  
	
	если ЭтотОбъект.last_update_id <= update_id тогда
		ЭтотОбъект.last_update_id = update_id + 1  ;
	конецесли;
	//СохранитьНастройки();
	
	возврат истина;
	
конецфункции

&НаСервере
Процедура ВыполнитьНовыеКоманды ()
	естьНовыеКоманды= ложь;
	для каждого команда из ЭтотОбъект.КомандыПользователей цикл
		если не команда.выполнено тогда
				естьНовыеКоманды= истина;
				
				//файлОтладка = Новый ЗаписьТекста("c:\tmp\debug.txt",,,истина);
				//файлОтладка.ЗаписатьСтроку(строка(ТекущаяДата()) +  " команда бота начало: " + команда.Команда);
				//файлОтладка.Закрыть();
					
				ВыполнитьКомандуБота(команда);
				
				//файлОтладка = Новый ЗаписьТекста("c:\tmp\debug.txt",,,истина);
				//файлОтладка.ЗаписатьСтроку(строка(ТекущаяДата()) +  " команда бота конец: " + команда.Команда);
				//файлОтладка.Закрыть();
				
			команда.выполнено = истина;
		конецесли;
		//если ЭтотОбъект.last_update_id < команда.update_id тогда
		//	ЭтотОбъект.last_update_id = команда.update_id + 1  ;
		//конецесли;
	конеццикла;
	если естьНовыеКоманды тогда
		//СохранитьКомандыПользователяВФайл();	
		сохранитьНастройки(); //таблица команд для след выполнения
	конецесли;
конецПроцедуры

функция ЧислоСтр (значение)
	//нов = строка(значение);
	//нов = СтрЗаменить(нов, " ", "");
	нов = СтрЗаменить(Формат(значение, "ЧДЦ=; ЧС=; ЧРГ=."),".","");
	возврат нов
конецфункции

функция ЭтоQRКод (текст)
	если СтрДлина(текст) >= 31 и 
		Лев(текст,2) = "01" и Сред(текст,17,2) = "21" тогда
		возврат истина;
	иначе
		возврат ложь;
	конецесли;
конецфункции

&НаСервере
Функция ВыполнитьКомандуБота(КомандаПользователя, Параметр=неопределено)
			//возврат истина;
        Команда = КомандаПользователя.Команда;
		состояниеЧата = ПолучитьСостояниеЧата( КомандаПользователя.chat_id);
		//очистить предыдущее состояние ?
		если этоНовыйЧат (КомандаПользователя.chat_id) тогда
			//новый пользователь написал лично боту
			ВывестиПриветствие(КомандаПользователя.chat_id);
			ЭтотОбъект.last_update_id = командаПользователя.update_id + 1;
        	возврат Истина;
		конецесли;
		
		МассивНайденныхСтрок = ЭтотОбъект.ТаблицаПонимаемыхКоманд.НайтиСтроки(Новый Структура("Имя", Команда));
		командаВыполнена = ложь;
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
                    Для Каждого Стр Из МассивНайденныхСтрок Цикл
                               Если Стр.ВыполняемоеДействие = "ВывестиПриветствие" Тогда
                                           ВывестиПриветствие(КомандаПользователя.chat_id);
                               ИначеЕсли Стр.ВыполняемоеДействие = "ВывестиПодсказку" Тогда
                                           ВывестиПодсказку(КомандаПользователя.chat_id);
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_ПолучитьЗаказы" Тогда
                                          командаВыполнена =  Озон_ПолучитьЗаказы();
										  ВывестиСообщениеТелеграм("Готово",КомандаПользователя.chat_id);
										  
							   ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_ОтправитьЗаказы" Тогда
                                          командаВыполнена =  Озон_ОтправитьЗаказы();                      
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СписокЗаказовСборкаСегодня" Тогда
                                          командаВыполнена =  Озон_СписокЗаказовСборкаСегодня(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СписокОтправленийДляСборкиНаСегодня" Тогда
                                          командаВыполнена =  Озон_СписокОтправленийДляСборкиНаСегодня(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СписокЗаказовПозже" Тогда
                                          командаВыполнена =  Озон_СписокЗаказовПозже(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СписокЗаказовВсех" Тогда
                                          командаВыполнена =  Озон_СписокЗаказовВсех(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СписокОтправленийВсех" Тогда
                                          командаВыполнена =  Озон_СписокОтправленийВсех(КомандаПользователя);
										  
							   ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_СледующийЗаказ" Тогда
                                          командаВыполнена =  Озон_СледующийЗаказ(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_ЗаказПоНомеру" Тогда
                                          командаВыполнена =  Озон_ЗаказПоНомеру(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_ТоварыПоНаименованию" Тогда
                                          командаВыполнена =  Озон_ТоварыПоНаименованию(КомандаПользователя);
										  
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_ИнфоОТекущемЗаказе" Тогда
                                          командаВыполнена =  Озон_ИнфоОТекущемЗаказе(КомандаПользователя);
										  
                               ИначеЕсли  Стр.ВыполняемоеДействие = "Озон_УдалитьQRКод" Тогда
                                          командаВыполнена =  Озон_УдалитьQRКод(КомандаПользователя);
								Иначе
                                          //////ВывестиПодсказку(ЗаписьРегистра.chat_id);
                               КонецЕсли;
						   КонецЦикла;
		ИначеЕсли	состояниеЧата <> неопределено и состояниеЧата.ТекущаяКоманда = "orderno" тогда
			командаВыполнена = УстановитьЗаказПоНомеру (КомандаПользователя);
		ИначеЕсли	состояниеЧата <> неопределено и состояниеЧата.ТекущаяКоманда = "namesearch" тогда
			командаВыполнена = ВывестиТоварыПоНаименованию (КомандаПользователя);
		ИначеЕсли	стрдлина(КомандаПользователя.команда)=13 тогда
			//штрихкод13
			командаВыполнена = ИнфоТовараПоШтрихкоду13 (КомандаПользователя);
		ИначеЕсли	врег(лев(КомандаПользователя.команда,3))="УТ-" или врег(лев(КомандаПользователя.команда,3)) = "РТ-" тогда
			//по коду
			командаВыполнена = ИнфоТовараПоКоду(КомандаПользователя);
		ИначеЕсли	ЭтоQRКод(КомандаПользователя.команда) тогда
			//2d код
			командаВыполнена = обработатьQRКодИзКоманды(КомандаПользователя);
        Иначе
                    //////ВывестиПодсказку(ЗаписьРегистра.chat_id);
			//СообщитьОбОшибке(КомандаПользователя.chat_id, "Не понял. Ошибка в команде? [" + КомандаПользователя.Команда + "]");
			командаВыполнена = истина;
		КонецЕсли;
		если командаВыполнена тогда
			ЭтотОбъект.last_update_id = командаПользователя.update_id + 1;
		конецесли;
        возврат Истина;
КонецФункции



///// ------ текст ------------------
&НаСервере
Процедура СообщитьОбОшибке(chat_id, ТекстОшибки)
			//Ресурс = "bot" + ЭтотОбъект.Токен + "/sendMessage?chat_id=" + СтрЗаменить(Формат(chat_id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + ТекстОшибки;
			//Соединение  =  Новый HTTPСоединение(ЭтотОбъект.Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
			//Запрос = Новый HTTPЗапрос(Ресурс);
			//Ответ = Соединение.Получить(Запрос);
	ВывестиСообщениеТелеграм(ТекстОшибки, chat_id);
КонецПроцедуры

&НаСервере
Процедура ВывестиПриветствие(chat_id)
КонецПроцедуры

&НаСервере
Процедура ВывестиПодсказку(chat_id)
			//Ресурс = "bot" + ЭтотОбъект.Токен + "/sendMessage?chat_id=" + СтрЗаменить(Формат(chat_id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + СписокКоманд();
			//Соединение  =  Новый HTTPСоединение(ЭтотОбъект.Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
			//Запрос = Новый HTTPЗапрос(Ресурс);
			//Ответ = Соединение.Получить(Запрос);
	ВывестиСообщениеТелеграм(СписокКоманд(), chat_id);
КонецПроцедуры

&НаСервере
функция этоНовыйЧат (chat_id = неопределено)
	для каждого чат из СписокЧатовДляУведомлений цикл
		если чат.id = chat_id тогда
			возврат ложь;
		конецесли;
	конеццикла;
	возврат истина;
КонецФункции

&НаСервере
функция получитьСписокЧатов (chat_id = неопределено)
	//возвращает массив с chat_id
	списокЧатов = Новый массив();
	если chat_id = 0 или chat_id = "" или chat_id = неопределено тогда
		//сообщение в чаты, где есть уведомления
		для каждого чат из СписокЧатовДляУведомлений цикл
			если чат.Включен и не чат.Игнорировать и чат.id<>0 тогда
				списокЧатов.Добавить( ЧислоСтр(чат.id) );
			конецесли;
		конеццикла;
	иначе
		списокЧатов.Добавить( СтрЗаменить(Формат(chat_id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") );
	конецесли;
	возврат списокЧатов;
	
КонецФункции

&НаСервере
//замена процедур выше
Функция ВывестиСообщениеТелеграм(текстСообщения, chat_id = 0)
	списокЧатов = получитьСписокЧатов (chat_id);
	
	если текстСообщения = "" тогда
		попытка
			вызватьИсключение ("Пустое сообщение - откуда?");	
		исключение
			для каждого чат из ЭтотОбъект.СписокЧатовДляУведомлений цикл
				если чат.ОтправлятьСообщенияОтладки  = Истина тогда
					chat_id = чат.id;
				конецесли;
			КонецЦикла;
			текстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //стек вызовов нужен	
		конецпопытки
	конецесли;
		
	сообщениеОтправлено = ложь;
	для каждого чат из СписокЧатов цикл
		Данные = Новый Структура;	
		Данные.Вставить("chat_id", чат);
		Данные.Вставить("text", СтрЗаменить(текстСообщения, """", "'") );
		Данные.Вставить("parse_mode", "html");
		//Данные.Вставить("disable_web_page_preview", ложь);
		PostData = JSON_СтрокаИзСтруктуры(Данные);
		Заголовки = Новый Соответствие;
	    Заголовки.Вставить("Content-Type", "application/json");
		АдресРесурса = "bot" + ЭтотОбъект.Токен + "/sendMessage";
		РезультатЗапроса = ВебЗапрос("POST", ЭтотОбъект.Сервер, АдресРесурса , истина,, PostData, Заголовки);
		если РезультатЗапроса <> "" тогда
			сообщениеОтправлено = истина;	
		конецесли;
		
        //https://core.telegram.org/bots/faq#my-bot-is-hitting-limits-how-do-i-avoid-this
		//30msg/sec 24msg / minute ??
		//может таймаут какой-либо?
		//пауза 1с, если больше колСообщений за колСекунд 
		колСекунд = 60; колСообщений = 20; ЗадержкаСекунд = 60;
		текущееВремя = ТекущаяДата(); 
		//т.е. все норм, если последний запрос больше колСекунд секунд назад - сбрасываем счетчик, если меньше - считаем 
		если текущееВремя - ВремяЗапросаКТелеграм > колСекунд  тогда
			ВремяЗапросаКТелеграм = текущееВремя;
			КоличествоЗапросовТелеграм = 0;
		иначе
			КоличествоЗапросовТелеграм = КоличествоЗапросовТелеграм + 1;
			если КоличествоЗапросовТелеграм > колСообщений тогда 
				//СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
				//WshShell = Новый COMОбъект("WScript.Shell"); 
				//WshShell.Run(СтрокаЗапроса, 0, -1); 					
				ОбщегоНазначенияБТС.Пауза(ЗадержкаСекунд);

				ВремяЗапросаКТелеграм = текущееВремя;
				КоличествоЗапросовТелеграм = 0;
			конецесли;
		конецесли;
			
	конецЦикла;
	
	возврат сообщениеОтправлено;
			
КонецФункции

//Текстовое представление списка команд
&НаСервере
Функция СписокКоманд()
            СтрВозврата = "";
            Для Каждого Стр Из ЭтотОбъект.ТаблицаПонимаемыхКоманд Цикл
                        СтрВозврата = СтрВозврата + ?(СтрВозврата <> "", Символы.ПС, "") + Стр.Имя + " - " + Стр.Описание;
            КонецЦикла;
			СтрВозврата = СтрВозврата + Символы.ПС + "По штрихкоду EAN13 получаем информацию о товаре";
			СтрВозврата = СтрВозврата + Символы.ПС + "По коду товара УТ- или РТ- получаем информацию о товаре";
			возврат СтрВозврата;
КонецФункции

///// ------------------------



///// ------ команды телеграмма ------------------

&НаСервере
функция обработатьQRКодИзКоманды(командаПользователя)
Конецфункции

&НаСервере
функция ДобавитьQrКодВЗаказ (заказ, qrкод, индекс, qrДляПашича)
Конецфункции

&НаСервере
функция ИнфоТовараПоШтрихкоду13(командаПользователя)
Конецфункции

&НаСервере
функция ИнфоТовараПоКоду(командаПользователя)
Конецфункции

&НаСервере
функция ИнфоИОстаткиТовара(номенклатура,chat_id)
Конецфункции

&НаСервере
функция Озон_СледующийЗаказ(командаПользователя)
Конецфункции

&НаСервере
функция Озон_ЗаказПоНомеру(командаПользователя)
Конецфункции

&НаСервере
функция УстановитьЗаказПоНомеру(командаПользователя)
Конецфункции

&НаСервере
функция Озон_ТоварыПоНаименованию(командаПользователя)
Конецфункции

&НаСервере
функция ВывестиТоварыПоНаименованию(командаПользователя)
	наименование = сокрЛП(командаПользователя.команда);
	ошибка = "";
	если наименование = "" тогда
		ошибка = "не указано наименование";
	иначе
		наименование = "%"+СтрЗаменить(наименование, " ", "%")+"%";
		запросНоменклатуры = новый запрос;
		запросНоменклатуры.Текст = "ВЫБРАТЬ
		                           |	Номенклатура.Ссылка КАК номенклатура
		                           |ИЗ
		                           |	Справочник.Номенклатура КАК Номенклатура
		                           |ГДЕ
		                           |	Номенклатура.Наименование ПОДОБНО &namesearch
		                           |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		                           |	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
		запросНоменклатуры.УстановитьПараметр("namesearch", наименование);
		попытка 
			результат = запросНоменклатуры.Выполнить().Выгрузить();
		исключение
			ошибка = "Ошибка запроса, возможно введены спецсимволы";
		КонецПопытки;
		если результат <> неопределено тогда
			кол = результат.Количество();
			если кол = 0 тогда
				ошибка = "Не найден.";
			иначеесли кол > 6 тогда
				ВывестиСообщениеТелеграм("Выведены первые 6:", командаПользователя.chat_id);
				кол = 6;
			конецесли;
			для к=0 по кол-1 цикл
				ИнфоИОстаткиТовара(результат[к].номенклатура,командаПользователя.chat_id);	
			КонецЦикла;
			если кол>0 тогда
				ВывестиСообщениеТелеграм("Выведено "+кол +"/"+результат.Количество(), командаПользователя.chat_id);
			конецесли;
		конецесли;
	конецесли;
	
	УстановитьСостояниеЧата( командаПользователя.chat_id, "");
	если ошибка <> "" тогда   
		ВывестиСообщениеТелеграм(ошибка, командаПользователя.chat_id);
	конецесли;
//	возврат ?(Результат <> "", истина, ложь);
	возврат истина;
Конецфункции

&НаСервере
функция Озон_СписокЗаказовСборкаСегодня(командаПользователя)
Конецфункции

&НаСервере
функция Озон_СписокОтправленийДляСборкиНаСегодня(командаПользователя=неопределено)
	нетЗаказовНаСегодня = истина;
	chat_id = ? (командаПользователя=неопределено, неопределено, командаПользователя.chat_id);
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		если началодня(ЭтотОбъект.СписокЗаказов[к].Отгрузка) = началоДня(текущаяДата() ) тогда
			нетЗаказовНаСегодня = ложь;
			списокЧатов = получитьСписокЧатов (chat_id);
			для каждого чат из списокЧатов цикл
				СообщитьОписаниеЗаказаДляСборки(чат, ЭтотОбъект.СписокЗаказов[к], к);
			конеццикла;
		конецесли;
	конеццикла;
	если нетЗаказовНаСегодня тогда 
		ВывестиСообщениеТелеграм("Нет заказов на сегодня", chat_id);
	конецесли;
	возврат истина;
Конецфункции

&НаСервере
функция Озон_СписокОтправленийВсех(командаПользователя)
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		СообщитьОписаниеЗаказаДляСборки(командаПользователя.chat_id, ЭтотОбъект.СписокЗаказов[к], к);
	конеццикла;
	возврат истина;
Конецфункции

&НаСервере
функция Озон_СписокЗаказовПозже(командаПользователя)
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		если началодня(ЭтотОбъект.СписокЗаказов[к].Отгрузка) > началоДня(текущаяДата()) тогда
			результат = СообщитьОписаниеЗаказаОзон(командаПользователя.chat_id, ЭтотОбъект.СписокЗаказов[к], к);
		конецесли;
	конеццикла;
	возврат истина;
Конецфункции

&НаСервере
функция Озон_СписокЗаказовВсех(командаПользователя)
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		СообщитьОписаниеЗаказаОзон(командаПользователя.chat_id, ЭтотОбъект.СписокЗаказов[к], к);
	конеццикла;
	возврат истина;
Конецфункции

&НаСервере
функция Озон_УдалитьQRКод(командаПользователя)
	УдалитьQRКодВЗаказе(командаПользователя.chat_id);
	Озон_ИнфоОТекущемЗаказе(командаПользователя);
	возврат истина;
Конецфункции

&НаСервере
Функция УдалитьQRКодВЗаказе (chat_id)
	текущийЗаказ = неопределено;
	для к=0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
		заказ = ЭтотОбъект.СписокЗаказов[к];
		если заказ.выбранТекущимВЧате =	chat_id тогда
			текущийЗаказ = заказ;
		конецесли;
	конеццикла;	
	если текущийЗаказ = неопределено тогда
		инфо = "Не выбран заказ";
	иначе
		заказ.QRкод = "";
		заказ.СостояниеЗаказа = "на сборке";
		инфо = "QRкод удален";
	конецесли;
	
	УстановитьСостояниеЧата (chat_id, "");
	Результат = ВывестиСообщениеТелеграм(инфо, chat_id);
	
	возврат Результат;
КонецФункции

&НаСервере
функция Озон_ИнфоОТекущемЗаказе(командаПользователя)
	текущийИндекс = неопределено;
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		если ЭтотОбъект.СписокЗаказов[к].выбранТекущимВЧате = командаПользователя.chat_id тогда
			текущийИндекс = к;
		конецесли;
	конеццикла;
	
	если текущийИндекс <> неопределено тогда    //выберем последний
		СообщитьОписаниеЗаказаОзон(командаПользователя.chat_id, ЭтотОбъект.СписокЗаказов[текущийИндекс], текущийИндекс );
	иначе
		инфо = "Не выбран заказ";
		Результат = ВывестиСообщениеТелеграм(инфо, командаПользователя.chat_id);
	конецесли;
	
	//возврат ?(Результат <> "", истина, ложь);
	возврат истина;
Конецфункции

&НаСервере
функция НоменклатураПоШтрихкоду(штрихкод)
	штрихЗапрос = новый Запрос;
	штрихЗапрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	штрихкодыноменклатуры.Номенклатура КАК Номенклатура
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК штрихкодыноменклатуры
	                    |ГДЕ
	                    |	штрихкодыноменклатуры.Штрихкод = &штрихкод13";
	штрихЗапрос.УстановитьПараметр("штрихкод13", штрихкод);
	результат = штрихЗапрос.Выполнить().Выгрузить();
	если результат.Количество()>0 тогда
		возврат результат[0].номенклатура;	
	конецесли;
	возврат неопределено;
конецфункции

&НаСервере
функция ШтрихкодПоНоменклатуре(номенклатура)
	//для Пашича - временно
	штрихЗапрос = новый Запрос;
	штрихЗапрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	штрихкодыноменклатуры.Штрихкод КАК Штрихкод
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры КАК штрихкодыноменклатуры
	                    |ГДЕ
	                    |	штрихкодыноменклатуры.номенклатура = &номенклатура";
	штрихЗапрос.УстановитьПараметр("номенклатура", номенклатура);
	результат = штрихЗапрос.Выполнить().Выгрузить();
	если результат.Количество()>0 тогда
		возврат результат[0].Штрихкод;	
	конецесли;
	возврат неопределено;
конецфункции

&НаСервере
Функция СкладКратко (СкладСсылка=неопределено, СкладКратко="")
	//задавать одно из двух
	//если задан Склад (ссылка) -> возвращаем аббревиатуру склада
	//если задана аббревиатура -> склад
	
	складыКратко = новый СписокЗначений();
..
	складыКратко.Добавить(справочники.Склады.НайтиПоНаименованию("OZON РЕАЛИЗАЦИЯ"), "OZO");
	
	если складСсылка = неопределено и СкладКратко = "" тогда
		возврат складыКратко[0].Значение;
	конецесли;		
	
	для каждого склад из СкладыКратко цикл
		если склад.Значение = складСсылка тогда
			возврат склад.Представление;
		конецесли;
	конеццикла;
	
	для каждого склад из СкладыКратко цикл
		если склад.Представление = СкладКратко тогда
			возврат склад.Значение;
		конецесли;
	конеццикла;
	
конецфункции

&НаСервере
функция ОстаткиПоТовару (номенклатура, ДобавитьПересчет = истина,складОтгрузки = неопределено )
	//складОтгрузки = возвращаемое значение - склад, на котором наибольшее количество
	складОзон = СкладКратко(неопределено, "OZO"); //исключаем из наибольшего количества
	складОтгрузки=справочники.Склады.ПустаяСсылка();
	
	запросОстатки = новый Запрос;
	запросОстатки.текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОстатки.Номенклатура.Код КАК НоменклатураКод,
	                |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	                |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК ВНаличииОстаток
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	                |ГДЕ
	                |	ТоварыНаСкладахОстатки.Номенклатура = &Номенклатура
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НоменклатураКод,
	                |	ТоварыНаСкладахОстатки.ВНаличииОстаток Убыв";
	ЗапросОстатки.УстановитьПараметр("Номенклатура",номенклатура); 
	результат = запросОстатки.Выполнить().Выгрузить();
	строкаОстатки = ""; перенос = "";
	если результат.Количество()>0 тогда
		к = 0;
		для каждого стр из результат цикл 
			разделитель = ? (строкаОстатки = "", "", ", ");
			строкаОстатки = строкаОстатки + разделитель + складКратко (стр.Склад) + ": " + стр.ВНаличииОстаток;
			к=к+1;
			если СкладОтгрузки = справочники.Склады.ПустаяСсылка() и стр.Склад <> складОзон тогда
				СкладОтгрузки = стр.Склад ; //будет выбран первый склад, кроме озона, т.к. на нем макс остаток
			конецесли;
		конецЦикла;
		//строкаОстатки = ? ( строкаОстатки = "", "", Символы.ПС+строкаОстатки);
	конецесли;
	
	возврат строкаОстатки;
	
конецФункции

&НаСервере
функция ИнфоОТоваре(товар, ссылкаНаТовар = "", ссылкаНакартинку = "")
	если ссылкаНакартинку <> "" тогда
		 код = "<a href=""" + ссылкаНакартинку +""">" + товар.код + "</a>";
	иначе 
		 код = товар.код
	конецесли; 
	если ссылкаНаТовар <> "" тогда
		 товарТекст = "<a href=""" + ссылкаНаТовар +""">" + строка(товар) + "</a>";
	иначе 
		 товарТекст = строка(товар);
	конецесли;					
	инфо = "("+ код + ") " + товарТекст;
	возврат инфо;
конецфункции

&НаСервере
функция ПолучитьСостояниеЧата(chat_id)
конецфункции

&НаСервере
функция УстановитьСостояниеЧата(chat_id, ТекущаяКоманда)
конецфункции

&НаСервере
функция естьСкладВУведомлениях (чат, остаткиВЗаказе)
	подходитЛюбойсклад = чат.склад = неопределено или чат.склад = Справочники.Склады.ПустаяСсылка(); 
	если чат.включен и (подходитЛюбойсклад или СтрНайти( остаткиВЗаказе , чат.склад )>0) и не булево(чат.Игнорировать) тогда
		возврат истина;
	иначе
		возврат ложь;
	конецесли;
конецфункции

&НаСервере
функция ИгнорироватьЧат (chat_id)
	если chat_id = "" или chat_id = неопределено тогда
		возврат истина;
	конецесли;
	
	нужныйчат = Неопределено;
	для каждого чат из ЭтотОбъект.СписокЧатовДляУведомлений  цикл
		если чат.id = chat_id тогда
			нужныйчат = чат;
			прервать;
		конецесли;
	конеццикла;
	если нужныйчат = неопределено тогда
		возврат ложь; //нет чата в списке уведомлений = не игнор (новый чат)
	иначе 
		возврат булево (чат.Игнорировать);
	конецесли;
конецфункции

&НаСервере
функция Озон_ОтправитьЗаказы(командаПользователя = неопределено)
	инфо = ОтправитьЗаказы();
	если командаПользователя <> неопределено тогда
		ВывестиСообщениеТелеграм(инфо, командаПользователя.chat_id);	
	иначе
		ВывестиСообщениеТелеграм(инфо);	
	конецесли;
	
	ПроверитьПеревестиНаСледующийСтатус(командаПользователя, истина);
	
	возврат истина;
КонецФункции
	
&НаСервере
функция ОтправитьЗаказы()			
	//отправить
	списокКопия = ЭтотОбъект.СписокЗаказов.Выгрузить();
	списокКопия.Сортировать("Отправление");
	инфо = "";
	
	//сформируем список на отгрузку
	//проверим, что в рамках одного отправления все собравно
	//к = списокКопия.Количество()-1;
	массивУдалить = новый Массив;
	массивСобраныДоЭтого = новый Массив;
	для к = 0 по списокКопия.Количество()-1 цикл 
		заказ = списокКопия[к];
		
		//не сегодняшние и не "собран" удаляем
		Если  
			не ( 
			  началоДня(заказ.Отгрузка) = началоДня( ТекущаяДата() )
				и заказ.СостояниеЗаказа = "собран"
				и заказ.QRкод <> "" //может быть, если собрали через озон
				и заказ.sku <> 0 //этого не должно быть
			   ) Тогда
			   
				массивУдалить.Добавить(заказ.отправление);
				если началоДня(заказ.Отгрузка) = началоДня( ТекущаяДата() ) 
					и заказ.СостояниеЗаказа = "собран" тогда
					если заказ.QRкод = "" тогда
						инфо = инфо + "QR не заполнен. Заказ не отправляем: ["+ строка(к) +"] "+ заказ.номенклатура + Символы.ПС;
					иначеесли  заказ.sku  =0 тогда
						инфо = инфо + "sku не заполнен. Заказ не отправляем: ["+ строка(к) +"] "+ заказ.номенклатура + Символы.ПС;
					иначе
						инфо = инфо + "Что-то не так. Заказ не отправляем: ["+ строка(к) +"] "+ заказ.номенклатура + Символы.ПС;
					конецесли;
				конецесли;
		конецесли; 
		
		//сегодняшние, которые уже каким-то другим образом собраны ("подтвержден") - просто, чтобы вывести потом
		Если  началоДня(заказ.Отгрузка) = началоДня( ТекущаяДата()) и заказ.СостояниеЗаказа = "подтвержден" тогда
			массивСобраныДоЭтого.Добавить(заказ);
		конецесли;
		
	конеццикла;
	к = списокКопия.Количество()-1 ;
	пока к >=0 цикл 
		если массивУдалить.Найти( списокКопия[к].отправление )<> неопределено тогда
			списокКопия.Удалить( к );
		конецесли;
		к = к - 1;	
	конеццикла;
	
	//у нас заказы разбиты по отправлениям, нужно объединить для озон
	//orders = Новый Массив;
	//прошлоеОтправление = ""; 
	//первыйЭлемент = истина;
	списокНомеровЗаказов = новый Массив; 
	Для к=0 по списокКопия.Количество()-1 Цикл
		если списокНомеровЗаказов.Найти(списокКопия[к].Отправление) = неопределено тогда
			списокНомеровЗаказов.Добавить(списокКопия[к].Отправление);
		КонецЕсли;
	конеццикла;
	
	инфо = ""; 
	количествоКоробок = 0;
	подтверждено = 0;
	Для к=0 по списокНомеровЗаказов.Количество()-1 Цикл
		order = Новый Структура;
		order.Вставить("posting_number", списокНомеровЗаказов[к]);				
		order.Вставить("packages", Новый Массив);
		составЗаказа = "";
		для каждого заказ из списокКопия цикл
			если заказ.отправление = списокНомеровЗаказов[к] тогда
				packages_item = Новый Структура;
				// /v2/posting/fbs/ship - удаляется с 30.08.2022
				//
				//package.Вставить("items", Новый Массив);  
				//
				//qrСтрока = заказ.QRкод ; 
				////если несколько шт одного отправления, тогда qr-коды в одной строке через разделитель 
				////См ДобавитьQrКодВЗаказ
				//mandatory_mark = Новый Массив;
				//для л = 1 по заказ.Количество цикл
				//	mandatory_mark.Добавить( лев (qrСтрока,31) );
				//	qrСтрока = Сред(qrСтрока, 33);  //31+1 разделитель => выбираем с 33-го
				//конеццикла;
				//
				//item = Новый Структура;
				//item.Вставить("mandatory_mark", mandatory_mark);
				//item.Вставить("quantity", заказ.Количество);
				//item.Вставить("sku", заказ.sku);
				//
				//package.items.Добавить(item);
				
				
				//----  /v3/posting/fbs/ship
				//
				packages_item.Вставить("products", Новый Массив);  
				qrСтрока = заказ.QRкод ; 
				//если несколько шт одного отправления, тогда qr-коды в одной строке через разделитель 
				//См ДобавитьQrКодВЗаказ
				exemplar_info = Новый Массив;
				для л = 1 по заказ.Количество цикл
					exemplar_info_item = Новый Структура;
					exemplar_info_item.Вставить("gtd", "");
					exemplar_info_item.Вставить("is_gtd_absent", истина);
					exemplar_info_item.Вставить("mandatory_mark", лев (qrСтрока,31));
					exemplar_info.Добавить( exemplar_info_item );
					qrСтрока = Сред(qrСтрока, 33);  //31+1 разделитель => выбираем с 33-го
				конеццикла;
				
				products_item = Новый Структура;
				products_item.Вставить("exemplar_info", exemplar_info);    //тут проверить - не создал массив, сразу вставил его
				products_item.Вставить("product_id", заказ.sku);
				products_item.Вставить("quantity", заказ.Количество);
				
				packages_item.products.Добавить(products_item);
				//
				///--- /v3/posting/fbs/ship
				
				
				
				order.packages.Добавить(packages_item);
				
				количествоКоробок = количествоКоробок + заказ.Количество; 
				составЗаказа = составЗаказа + строка(заказ.номенклатура) + ?(заказ.Количество = 1,"", " !!!шт: ") + Символы.ПС+ Символы.ПС;
			конецесли;
		конеццикла;
		результат = ОтправитьОтдельныйЗаказ( order );
		инфо = инфо + результат + составЗаказа;
		
		Если СтрНайти(результат, "Заказ отправлен") тогда //ок
			подтверждено = 	подтверждено +1;

			для каждого заказ из ЭтотОбъект.СписокЗаказов цикл
				если заказ.Отправление = списокНомеровЗаказов[к] тогда
					заказ.СостояниеЗаказа = "подтвержден";
				конецесли;
			конеццикла;
		конецесли;
		
		//ВывестиСообщениеТелеграм( результат );
		
		
	конеццикла;
	неПодтверждено = списокНомеровЗаказов.Количество() -  подтверждено;
	инфо = инфо + Символы.ПС + "Заказов: " + списокНомеровЗаказов.Количество() + символы.ПС
							 + ? (неПодтверждено >0, " не подтверждено: " + подтверждено + символы.ПС, "" )
							 + "Коробок: " + количествоКоробок + символы.ПС;  
							 
	попытка 						 
		подтвержденные ="";							 
		Для каждого	заказ из массивСобраныДоЭтого цикл
			подтвержденные = подтвержденные + "Уже подтвержден " + заказ.Отправление+ символы.ПС 
											+ строка(заказ.номенклатура) + ?(заказ.Количество = 1,"", " !!!шт: ") + Символы.ПС+ Символы.ПС;
		конеццикла;							
		инфо = инфо + подтвержденные;
	исключение
		инфо = инфо +"[ОтправитьЗаказы] ошибка: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());	
	конецпопытки;
		
	возврат инфо;
	
КонецФункции

&НаСервере
функция ОтправитьОтдельныйЗаказ(order)
		ClientId = ЭтотОбъект.Ozon_ClientID;
		ApiKey = ЭтотОбъект.Ozon_APIKey;
		АдресСервера = "api-seller.ozon.ru";	
		//АдресРесурса = "/v2/posting/fbs/ship";
		АдресРесурса = "/v3/posting/fbs/ship";
		Заголовки = Новый Соответствие();	
		Заголовки.Вставить("Client-Id", ClientId);
		Заголовки.Вставить("Api-Key", ApiKey);
		Заголовки.Вставить("Content-Type", "application/json");
		инфо = "";
		PostData = JSON_СтрокаИзСтруктуры(order); 	
		Попытка
			РезультатЗапроса = ВебЗапрос("POST", АдресСервера, АдресРесурса,,, PostData, Заголовки);
			
			ДанныеОтвет = JSON_ВСтруктуру(РезультатЗапроса);					
			Если ДанныеОтвет.свойство("result") Тогда
				РезультатСборки = "";
				Для Каждого item Из ДанныеОтвет.result Цикл 
					Если ПустаяСтрока(РезультатСборки) = Ложь Тогда
						РезультатСборки = РезультатСборки + ", ";
					КонецЕсли;
					РезультатСборки = РезультатСборки + item;
				КонецЦикла;
	            инфо = инфо + ("Заказ отправлен " + РезультатСборки + символы.ПС);
			Иначе
				инфо = инфо + ("" + order.posting_number + " " + РезультатЗапроса);
			КонецЕсли;
			
		Исключение
			инфо = инфо + ("[ОтправитьОтдельныйЗаказ] Ошибка. " + order + ", " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки;	
		
		возврат инфо;
КонецФункции

&НаСервере
функция ПроверитьПеревестиНаСледующийСтатус(командаПользователя = неопределено, ПропуститьОтправку = ложь)
	
	если не ПропуститьОтправку тогда
		//если все заказы на сегодня собраны, тогда отправим их
		естьСегодняшние = ложь; естьСобранные = ложь; всеСобраны = истина;
		для к = 0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
			заказ =  ЭтотОбъект.СписокЗаказов[к];
			если началоДня(заказ.Отгрузка) = началоДня( ТекущаяДата() ) тогда
				естьСегодняшние = истина;
				если не (заказ.СостояниеЗаказа = "собран" или заказ.СостояниеЗаказа = "подтвержден") тогда
					всеСобраны = ложь;
				конецесли;
				если заказ.СостояниеЗаказа = "собран" тогда
					естьСобранные = Истина;	
				конецесли;
			конецесли;
		конеццикла;
		если естьСегодняшние и естьСобранные и всеСобраны тогда
			Озон_ОтправитьЗаказы(командаПользователя);
			Озон_СписокОтправленийДляСборкиНаСегодня(командаПользователя);
			СохранитьНастройки();
		конецесли;
	конецесли;
	
	//если все заказы на сегодня подтверждены, тогда сделаем доки
	естьСегодняшние = ложь; всеПодтверждены = истина;
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
		заказ =  ЭтотОбъект.СписокЗаказов[к];
		если началоДня(заказ.Отгрузка) = началоДня( ТекущаяДата() ) тогда
			естьСегодняшние = истина;
			если заказ.СостояниеЗаказа <> "подтвержден" тогда
				всеПодтверждены = ложь;
			конецесли;
		конецесли;
	конеццикла;
	если естьСегодняшние и всеПодтверждены тогда
		СоздатьДокументыПоОтгрузке();	
		СохранитьНастройки();
	конецесли; 
	
	
КонецФункции



//// ozon --------- >

//1. заказы добавляются из озона, обновляются их статусы
//2. заказ собран, когда указан qr-код или он получает статус <> awaiting_packaging
//3. чтобы указать QR-код, пользователь выбирает заказ по товару (через ШК или код) - можно 
//   или указанием заказа. При этом чат пользователя (группа или личный чат)закрепляется за 
//   заказом, чтобы	можно было понять, куда отнести qr-код.


&НаСервере
Функция d(Число)
	Если Число = Неопределено Тогда
		Возврат "NULL";
	КонецЕсли;
	Возврат Формат(Число, "ЧН=; ЧГ=");	
КонецФункции

&НаСервере
Функция todate(дат)
	Если ПустаяСтрока(дат) Тогда
		Возврат "";
	КонецЕсли;
	д = СтрЗаменить(дат, "Z", "");
	д = СтрЗаменить(д, "T", "");
	д = СтрЗаменить(д, "-", "");
	д = СтрЗаменить(д, ":", "");
	Возврат Дата(д);
КонецФункции

&НаСервере
функция Озон_ДатаПервогоЗаказаНаСборку()
	ClientId = ЭтотОбъект.Ozon_ClientID;
	ApiKey = ЭтотОбъект.Ozon_APIKey;
	АдресСервера = "api-seller.ozon.ru";	
	
	http_result = "";
	датаФормированияЗаказа = неопределено;
	
	Попытка
		АдресРесурса = "/v3/posting/fbs/unfulfilled/list";
		ИмяМетода = "POST";
		status = "awaiting_packaging";
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("cutoff_from", Формат( НачалоДня(ТекущаяДата()), "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
		Фильтр.Вставить("status", status);
		
		Данные = Новый Структура;
		Данные.Вставить("dir", "asc");
		Данные.Вставить("filter", Фильтр);
		//Данные.Вставить("with", ФильтрЕще);			
		Данные.Вставить("limit", 1);
		Данные.Вставить("offset", 0);			
		        			
		PostData = JSON_СтрокаИзСтруктуры(Данные); 	
		                      			
		Заголовки = Новый Соответствие();	
		Заголовки.Вставить("Client-Id", ClientId);
		Заголовки.Вставить("Api-Key", ApiKey);
		Заголовки.Вставить("Content-Type", "application/json");
		
		РезультатЗапроса = ВебЗапрос(ИмяМетода, АдресСервера, АдресРесурса,,, PostData, Заголовки);
		http_result = РезультатЗапроса;	
		Данные = JSON_ВСтруктуру(РезультатЗапроса);					
		
		Если Данные.свойство("result") Тогда
			Если Данные.result.postings.Количество() > 0 Тогда										
				Для Каждого item Из Данные.result.postings Цикл
					датаФормированияЗаказа = началоДня( todate(item.in_process_at) );
				конеццикла;
			конецесли;					
		конецесли;
	исключение
	конецпопытки;
		
	возврат датаФормированияЗаказа; 
	
конецфункции

&НаСервере
функция Озон_ПолучитьЗаказы(запроситьВсе = ложь)
	//заказы получаются накопительно, т.е. если запрашивались по 13:14:15, то следующие будут с 13:14:16
	//если пропустили - надо на форме поставить старое время
	//периодически нужно запрашивать обновление статусов
	результат = ложь;
	//опрашиваем озон не раньше чем через минуту после прошлого опроса
	если текущаядата() <  ЭтотОбъект.ВремяЗапросаЗаказов + 1*60   тогда
		возврат ложь;	
	конецесли;
	//тз = Озон_ПолучитьСписокПоследнихЗаказов();
	датаС = ?(ЭтотОбъект.ВремяЗапросаЗаказов = неопределено,  Озон_ДатаПервогоЗаказаНаСборку(), ЭтотОбъект.ВремяЗапросаЗаказов);
	датаС = ?(датаС = неопределено, НачалоДня(ТекущаяДата())-7*3600*24 ,датаС);
	
	проверитьУдаленные = ложь;
	если текущаядата() > ЭтотОбъект.ВремяЗапросаОбновленийЗаказов + 15*60 или запроситьВсе тогда
		//каждые 15 мин - обновление статусов. 
		//Нужно выбрать время с 1го заказа, тогда запросятся все заказы и статусы обновятся
		датаПервогоЗаказа = Озон_ДатаПервогоЗаказаНаСборку();
		датаС = ?(датаПервогоЗаказа = неопределено, ЭтотОбъект.ВремяЗапросаЗаказов, датаПервогоЗаказа);
		//для старых заказов
		для каждого заказ из ЭтотОбъект.СписокЗаказов цикл
			если заказ.Заказано < датаС тогда
				датаС = заказ.Заказано ;
			конецесли;
			проверитьУдаленные = истина;
		конеццикла;
		
		//если ЭтотОбъект.СписокЗаказов.Количество()>0 тогда
		//	////датаС = ЭтотОбъект.СписокЗаказов[0].Заказано;	
		//	//если ЭтотОбъект.ВремяЗапросаЗаказов < датаС тогда
		//	//	датаС = ЭтотОбъект.ВремяЗапросаЗаказов ;
		//	//конецесли;
		//	проверитьУдаленные = истина;
		//конецесли;	
		ЭтотОбъект.ВремяЗапросаОбновленийЗаказов = текущаядата() ;
	иначе
	конецесли;
	ДатаПо = КонецДня(ТекущаяДата());	
	
	//естьНовыеЗаказы = 
	Озон_ПолучитьСписокПоследнихЗаказов(датаС,ДатаПо, проверитьУдаленные);

	//не можем выбрать - не знаем какой чат
	//если ЭтотОбъект.СписокЗаказов.Количество() > 0 тогда
	//	естьВыбранный = ложь;
	//	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
	//		если заказ.выбранТекущимВЧате<>0 тогда;
	//			естьВыбранный = истина	
	//		конецесли;			
	//	конеццикла;
	//	если не естьВыбранный тогда
	//		выбранныйИндекс = НайтиИндексСледующегоЗаказНаСборку( командаПользователя.chat_id );
	//	конецесли;
	//конецесли;

	//
	//Озон_ОчиститьСтарыеЗаказы();
		
	//возврат результат;
	возврат истина;
	
конецфункции

&НаСервере
функция Озон_ПолучитьСписокПоследнихЗаказов(датаС,ДатаПо, проверитьУдаленные = ложь)
	ClientId = ЭтотОбъект.Ozon_ClientID;
	ApiKey = ЭтотОбъект.Ozon_APIKey;
	АдресСервера = "api-seller.ozon.ru";	
	
	естьНовыеЗаказы = ложь;
	тз = неопределено;
	http_result = "";
	
	Попытка
		АдресРесурса = "/v3/posting/fbs/list";
		ИмяМетода = "POST";
		status = "awaiting_packaging";
		//status = "awaiting_delivery";
		//сортировка по дате? рассчитываю, что по дате
		
		Фильтр = Новый Структура;
		//Фильтр.Вставить("status", status);
		
		Фильтр.Вставить("since", Формат(датаС, "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
//		Фильтр.Вставить("since", Формат(датаС - 24*60*60 , "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
		Фильтр.Вставить("to", Формат(датаПо, "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
		
		ФильтрЕще = Новый Структура;
		ФильтрЕще.Вставить("analytics_data", false);
		ФильтрЕще.Вставить("barcodes", false);
		ФильтрЕще.Вставить("financial_data", true);
	
		...
		
		
	Исключение
		этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + ("[Озон_ПолучитьСписокПоследнихЗаказов] Ошибка. поз: "+ строка(гдеОшибка) +" " + Данные + ", " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));				
	КонецПопытки;
	
	возврат естьНовыеЗаказы;
	
КонецФункции

&НаСервере
функция проверитьИзменениеВЗаказе(заказТЗ, заказВебЗапрос, полеЗаказа, текстСообщения );
	//значениеТЗ = Неопределено;
	//значениеВебЗапрос = Неопределено;
	нужноСохранитьИзменения = ложь;
	//если заказВебЗапрос.Свойство(полеЗаказа) тогда
		//заказТЗ.Свойство(полеЗаказа,значениеТЗ);
		//заказВебЗапрос.Свойство(полеЗаказа,значениеВебЗапрос); 
		//если значениеТЗ <> значениеВебЗапрос тогда
		если заказТЗ[полеЗаказа] <> заказВебЗапрос[полеЗаказа] тогда
			староеЗначение = заказТЗ[полеЗаказа] ;
			заказТЗ[полеЗаказа] = заказВебЗапрос[полеЗаказа] ;
			нужноСохранитьИзменения = Истина;
			вывестиСообщениеТелеграм(текстСообщения +": " + староеЗначение + " -> " + заказВебЗапрос[полеЗаказа] + ". Заказ:" );
			СообщитьОписаниеЗаказаДляСборки(0,заказТЗ);
			
		конецесли;
	//конецесли;
	возврат нужноСохранитьИзменения;
	
КонецФункции

&НаСервере
Функция ПолучитьКомментарииРеализацийОтДаты(ДатаНачала)
КонецФункции

&НаСервере
Функция Озон_ПолучитьКартинкуТовара(offer_id, sku=0)				
	//offer_id у нас  = Код номенклатуры
	ClientId = ЭтотОбъект.Ozon_ClientID;
	ApiKey = ЭтотОбъект.Ozon_APIKey;
	АдресСервера = "api-seller.ozon.ru";	
	
	imagelink =	"";
	Попытка
		АдресРесурса = "/v2/product/info";
		ИмяМетода = "POST";
		
		Данные = Новый Структура;
		Данные.Вставить("offer_id", offer_id);
		
		PostData = JSON_СтрокаИзСтруктуры(Данные); 	
		                      			
		Заголовки = Новый Соответствие();	
		Заголовки.Вставить("Client-Id", ClientId);
		Заголовки.Вставить("Api-Key", ApiKey);
		Заголовки.Вставить("Content-Type", "application/json");
		
		РезультатЗапроса = ВебЗапрос(ИмяМетода, АдресСервера, АдресРесурса,,, PostData, Заголовки);
			
		Данные = JSON_ВСтруктуру(РезультатЗапроса);					
		Если Данные.свойство("result") и Данные.result.свойство("primary_image") Тогда
			imagelink = Данные.result.primary_image;
			//Для Каждого item Из Данные.result.sources Цикл
			//	Если item.source = "fbs" Тогда
			//		//imagelink = "https://www.ozon.ru/context/detail/id/" + d(item.sku);
			//		//sku = d(item.sku);
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;		
	Исключение
		этотОбъект.СообщениеОтладки = этотОбъект.СообщениеОтладки + ("[Озон_ПолучитьКартинкуТовара] Ошибка. " + Данные + ", " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));				
	КонецПопытки;	
	Возврат imagelink;
КонецФункции

&НаСервере
Функция СообщитьОписаниеЗаказаДляСборки(chat_id, заказ, индекс = "")
	номер = ? (индекс = "", "", индекс+1);
	строкаСообщения = ? (СтрНайти( "собран, подтвержден, в документе", заказ.СостояниеЗаказа)>0, "+","-" )
					+"["+ номер + "] "+ заказ.отправление 
					+ ? (заказ.количество > 1, "*** " + заказ.количество + "шт ***"," ");
	если  не( (заказ.номенклатура) = неопределено или заказ.номенклатура = Справочники.Номенклатура.ПустаяСсылка() ) тогда
		инфо = строка(заказ.номенклатура);
	иначе
		инфо = заказ.Код + ", не найдена номенклатура по коду!!!";
	конецесли;
	строкаСообщения = строкаСообщения + инфо;
	РезультатЗапроса = ВывестиСообщениеТелеграм(строкаСообщения, chat_id );
	возврат ? (РезультатЗапроса <> "", истина, ложь );
КонецФункции

&НаСервере
Функция СообщитьОписаниеЗаказаОзон(chat_id, заказ, индекс = "", НеОтправлятьВернутьТекст = ложь);
	строкаСообщения =   ? (заказ.выбранТекущимВЧате = chat_id, "-текущий- ", "")
						+ "[" + ? (индекс = "", заказ.Отправление, индекс+1) + "]";
	строкаСообщения = строкаСообщения +
					  	  ? ( началоДня (заказ.Отгрузка) > НачалоДня(ТекущаяДата()), 
							  " !<i>" + Формат(заказ.Отгрузка, "ДФ=dd.MM.yyyy")+ "</i>", 
						      "") 
						+ ? (заказ.СостояниеЗаказа <> "на сборке", " " + заказ.СостояниеЗаказа + ":.."+прав(заказ.qrКод,5), " " +строка(заказ.Количество)+"шт" ) ;
						
	если  не( (заказ.номенклатура) = неопределено или заказ.номенклатура = Справочники.Номенклатура.ПустаяСсылка() ) тогда
		инфо = ИнфоОТоваре(заказ.номенклатура, "https://www.ozon.ru/context/detail/id/"+d(заказ.sku), заказ.картинка );
		инфо = инфо +" ("+ ? ( заказ.остатки = "", "нет остатков", заказ.остатки) +")";
		инфо = инфо + ? (заказ.ЗаменаНоменклатуры = "", "", символы.ПС+ "замена: " + заказ.ЗаменаНоменклатуры);
	иначе
		инфо = заказ.Код;
		если заказ.картинка <> "" тогда
			 инфо = "<a href=""" + заказ.картинка +""">" + инфо + "</a>";
		 конецесли;					
		 инфо = инфо + ", не найдена номенклатура по коду!!!";
	конецесли;
	строкаСообщения = строкаСообщения + " "+инфо;
	
	если НеОтправлятьВернутьТекст тогда
		//тг не может отправить много сообщений сразу, поэтому группируем их во внешней процедуре
		возврат строкаСообщения;
	иначе
		РезультатЗапроса = ВывестиСообщениеТелеграм(строкаСообщения, chat_id );
		возврат ? (РезультатЗапроса <> "", истина, ложь );
	конецесли;
КонецФункции

&НаСервере
//по идее неактуально, должно очищаться при получении новых 
Процедура Озон_ОчиститьСтарыеЗаказы()
	
	к = ЭтотОбъект.СписокЗаказов.Количество()-1;
	естьИзменения = ложь;
	пока к >=0  цикл
		если НачалоДня( ЭтотОбъект.СписокЗаказов[к].Отгрузка ) < НачалоДня(ТекущаяДата())  тогда
			ЭтотОбъект.СписокЗаказов.Удалить(к);	
			естьИзменения = истина;
		конецесли;
		к = к -1; 
	конеццикла;
	если естьИзменения  тогда 
		СохранитьНастройки();
	конецесли;

конецПроцедуры

&НаСервере
функция НайтиИндексСледующегоЗаказНаСборку(chat_id, искатьНачинаяСЗавтрашних = ложь)
	
	//0 будет, если не выбран
	текущийИндекс = -1;
	для к = 0 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		если ЭтотОбъект.СписокЗаказов[к].выбранТекущимВЧате = chat_id тогда
			текущийИндекс = к;
		конецесли;
	конеццикла;
	
	//дойдем до последнего и с начала
	найденныйИндекс = неопределено;  //останется, если все собраны /нет заказов
	индексыПоКругу = новый Массив;
	для к = текущийИндекс+1 по ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		индексыПоКругу.Добавить(к);
	конеццикла;
	для к = 0 по текущийИндекс  цикл
		индексыПоКругу.Добавить(к);
	конеццикла;
	
	к = 0; 
	пока к <= ЭтотОбъект.СписокЗаказов.Количество() -1 цикл
		//нужен
		заказ = ЭтотОбъект.СписокЗаказов[индексыПоКругу[к]];
		//если заказ.СтатусОзон = "awaiting_packaging" и заказ.QRкод = "" тогда
		если заказ.состояниеЗаказа = "на сборке" 
				и (не (искатьНачинаяСЗавтрашних) и началодня(заказ.Отгрузка) = началодня(ТекущаяДата()) 
				  или
				      (искатьНачинаяСЗавтрашних) и началодня(заказ.Отгрузка) > началодня(ТекущаяДата()) 
				  )
				тогда
			найденныйИндекс = индексыПоКругу[к];
			прервать;	
		конецесли;
		к = к+1	
	конеццикла;
	
	возврат  найденныйИндекс;
конецфункции

&НаСервере
функция выбратьЗаказПоНомеру(chat_id, номер)
	если номер > 0 и номер <= ЭтотОбъект.СписокЗаказов.Количество() тогда
		возврат (номер-1); //индекс
	иначе
		возврат неопределено;
	конецесли;
конецфункции

&НаСервере
Функция НайтиЗаказПоНоменклатуре (номенклатура)
	индексЗаказа= неопределено;
	для к=0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
		заказ = ЭтотОбъект.СписокЗаказов[к];
		если заказ.Номенклатура = номенклатура и заказ.СтатусОзон = "awaiting_packaging" тогда 
			индексЗаказа=к;
		конецесли;
	конеццикла;
	возврат индексЗаказа;
КонецФункции

&НаСервере
процедура ПрикрепитьЧатКЗаказу (индексЗаказа, chat_id)
	//требуется для применения 2д-кода
	//актуально при смене следующий/предыдущий; когда нет выбранного заказа; 
	//			при указании товара через штрихкод или код товара
	
	//очищаем ссылки на этот чат в других заказах и ставим чат в нужный заказ.
	//таким образом, когда будет указан qr-код в этом чате, он подключится к
	//нужному заказу. Список чатов не подходит для этих целей
	
	для к=0 по ЭтотОбъект.СписокЗаказов.Количество()-1 цикл
		заказ = ЭтотОбъект.СписокЗаказов[к];
		если к = индексЗаказа тогда
			заказ.выбранТекущимВЧате=chat_id;
		иначеесли заказ.выбранТекущимВЧате = chat_id тогда 
			заказ.выбранТекущимВЧате="";
		конецесли;
	конеццикла;
	
конецпроцедуры

&НаСервере
функция статусЗаказаНуженДляОбработки(статус)
//
//acceptance_in_progress — идёт приёмка,
//awaiting_approve — ожидает подтверждения,
//awaiting_packaging — ожидает упаковки,
//awaiting_deliver — ожидает отгрузки,
//arbitration — арбитраж,
//cancelled — отменено,
//client_arbitration — клиентский арбитраж доставки,
//delivering — доставляется,
//driver_pickup — у водителя,
//delivered — доставлено,
//not_accepted — не принят на сортировочном центре.
//

	если 	статус = "awaiting_deliver" или 
			статус = "awaiting_packaging" или
			статус = "awaiting_approve" или
			статус = "arbitration"
		тогда
		возврат истина;
	иначе 
		возврат ложь;
	конецесли;	

конецфункции

&НаСервере
функция состояниеЗаказаПоСтатусуОзон(статус)
//
//acceptance_in_progress — идёт приёмка,
//awaiting_approve — ожидает подтверждения,
//awaiting_packaging — ожидает упаковки,
//awaiting_deliver — ожидает отгрузки,
//arbitration — арбитраж,
//cancelled — отменено,
//client_arbitration — клиентский арбитраж доставки,
//delivering — доставляется,
//driver_pickup — у водителя,
//delivered — доставлено,
//not_accepted — не принят на сортировочном центре.
//

	варианты = новый Массив();
	варианты.Добавить("на сборке");
	варианты.Добавить("собран");
	варианты.Добавить("подтвержден");
	варианты.Добавить("в документе");
	варианты.Добавить("озон_на_удаление");
	варианты.Добавить("изменять вручную");

	если статус = "awaiting_packaging" тогда
		состояние = варианты[0] ;
	иначеесли статус = "awaiting_deliver" тогда
		состояние = варианты[2] ;
	иначеесли 
			статус = "awaiting_approve" 
			или статус = "acceptance_in_progress" 
			или статус = "delivering" 
			или статус = "delivered" 
			или статус = "arbitration"		тогда
		состояние = варианты[2] ;
	иначе 
		состояние = варианты[3] ;
	конецесли;	
	возврат состояние;
конецфункции

//// ozon  < --------




//---ozon заказы в документ---
//

&НаСервере
функция получитьСтруктуруДанныеЗаДень()
	нов = Новый Структура;
	нов.Вставить("ДатаОтгрузки");
	нов.Вставить("Реализация");
	нов.Вставить("ДанныеПоСкладам", новый Массив());
	//	нов.Вставить("Склад"); 
	//	нов.Вставить("ИндексыЗаказов"); 
	//	нов.Вставить("Перемещение");
	возврат нов;
конецфункции

&НаСервере
функция получитьСтруктуруДанныеПоСкладу()
	нов = Новый Структура;
	нов.Вставить("Склад"); 
	нов.Вставить("Перемещение");
	нов.Вставить("ИндексыЗаказов",новый Массив()); 
	возврат нов;
конецфункции

&НаСервере
Процедура добавитьЗаказВДанныеПоДнямСкладам(данныеПоДнямСкладам, заказ, индексЗаказа )
конецПроцедуры

&НаСервере
процедура СоздатьДокументыПоОтгрузке ()
конецпроцедуры

//настройки внутри документов
&НаСервере
функция СоздатьДокументРеализацииНаОзон (датаОтгрузки)
	
	док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	док.дата = датаОтгрузки;
	док.контрагент = Справочники.контрагенты.НайтиПоНаименованию("ИНТЕРНЕТ РЕШЕНИЯ ООО"); //!
	док.Партнер = док.контрагент.Партнер;
	док.Склад = СкладКратко(неопределено, "OZO");
	соглашениеОтбор = Новый Структура ;
	соглашениеОтбор.Вставить("Наименование", "Договор КОМИССИИ");
	выборка = справочники.СоглашенияСКлиентами.Выбрать(, док.Контрагент, соглашениеОтбор);
	Выборка.Следующий(); //должно существовать соглашение
	док.Соглашение = выборка.Ссылка;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	док.ЦенаВключаетНДС = ложь;
	док.Организация = Справочники.Организации.НайтиПоНаименованию("Спиричкина Наталья Петровна ИП"); 
	док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	док.Валюта = Справочники.валюты.НайтиПоНаименованию("RUB"); 
	док.ВалютаВзаиморасчетов = док.Валюта;
	док.Менеджер = Пользователи.НайтиПоИмени("Администратор");
	возврат Док;
конецфункции

&НаСервере
функция СоздатьДокументПеремещенияНаОзон (складОтгрузки,датаОтгрузки)
	
	док = Документы.ПеремещениеТоваров.СоздатьДокумент();
	док.дата = датаОтгрузки;
	док.СкладОтправитель = складОтгрузки;
    док.СкладПолучатель = СкладКратко(неопределено, "OZO");;
	док.Организация = Справочники.Организации.НайтиПоНаименованию("Спиричкина Наталья Петровна ИП"); 
	док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	док.Статус = перечисления.СтатусыПеремещенийТоваров.Принято;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	док.Ответственный = Пользователи.НайтиПоИмени("Администратор");
	
	возврат Док;
конецфункции

&НаСервере
функция ДобавитьТоварВДокумент(докОбъект, заказ, табЧастьНаименование = "Товары")
конецфункции

//
//===ozon заказы в документ===




